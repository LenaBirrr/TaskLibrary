@page "/notifications"
@using TaskLibrary.WEB
@using TaskLibrary.Web.Components
@using TaskLibrary.Web.Pages.Notifications.Models
@using TaskLibrary.Web.Pages.Notifications.Services
@using TaskLibrary.Web.Pages.Providers
@using System.Security.Claims;

@layout MainLayout

@attribute [Authorize]

@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager navigationManager
@inject IAuthService auth
@inject INotificationService notificationService
@inject AuthenticationStateProvider authenticationStateProvider
<MudText Typo="Typo.h4" Class="ma-8">Notifications</MudText>

<MudTable Items="@NotificationListItems" Class="ma-8" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Filter="new Func<NotificationListItem,bool>(FilterFuncSimple)">
    <ColGroup>
        <col style="width:50px;" />
        <col />
        <col />
        <col />
        <col style="width:100px;" />
    </ColGroup>
    <ToolBarContent>
        
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Text</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Title">@context.Text</MudTd>
        <MudTd>
            </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>


@code {
    private bool dense = false;
    private bool hover = true;
    private bool striped = true;
    private bool bordered = false;

    private string searchString = "";




    private IEnumerable<NotificationListItem> NotificationListItems = new List<NotificationListItem>();

    private async Task ReloadData()
    {
        NotificationListItems = await notificationService.GetNotifications(0, 10000);
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await ReloadData();
        }
        catch(Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private bool FilterFuncSimple(NotificationListItem NotificationListItem) => FilterFunc(NotificationListItem, searchString);

    private bool FilterFunc(NotificationListItem NotificationListItem, string searchString)
    {
        return 
            string.IsNullOrWhiteSpace(searchString)
            ||
            NotificationListItem.Text.Contains(searchString, StringComparison.OrdinalIgnoreCase)
        ;
    }
}