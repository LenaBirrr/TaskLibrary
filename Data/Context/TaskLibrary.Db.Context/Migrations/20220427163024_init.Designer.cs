// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskLibrary.Db.Context.Context;

#nullable disable

namespace TaskLibrary.Db.Context.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20220427163024_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TaskLibrary.Db.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("TaskLibrary.Db.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ProgrammingTaskId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProgrammingTaskId");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("TaskLibrary.Db.Entities.LanguageForTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ProgrammingLanguageId")
                        .HasColumnType("int");

                    b.Property<int>("ProgrammingTaskId")
                        .HasColumnType("int");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProgrammingLanguageId");

                    b.HasIndex("ProgrammingTaskId");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("languages_tasks", (string)null);
                });

            modelBuilder.Entity("TaskLibrary.Db.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("SubscribtionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubscribtionId");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("TaskLibrary.Db.Entities.ProgrammingLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Paradigm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Realization")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.ToTable("programming_languages", (string)null);
                });

            modelBuilder.Entity("TaskLibrary.Db.Entities.ProgrammingTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Answers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProblemStatement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("programming_tasks", (string)null);
                });

            modelBuilder.Entity("TaskLibrary.Db.Entities.Solution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ProgrammingLanguageId")
                        .HasColumnType("int");

                    b.Property<int>("ProgrammingTaskId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProgrammingLanguageId");

                    b.HasIndex("ProgrammingTaskId");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("solutions", (string)null);
                });

            modelBuilder.Entity("TaskLibrary.Db.Entities.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProgrammingTaskId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Uid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProgrammingTaskId");

                    b.HasIndex("Uid")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("subscribtions", (string)null);
                });

            modelBuilder.Entity("TaskLibrary.Db.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("TaskLibrary.Db.Entities.Comment", b =>
                {
                    b.HasOne("TaskLibrary.Db.Entities.ProgrammingTask", "ProgrammingTask")
                        .WithMany("Comments")
                        .HasForeignKey("ProgrammingTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskLibrary.Db.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgrammingTask");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskLibrary.Db.Entities.LanguageForTask", b =>
                {
                    b.HasOne("TaskLibrary.Db.Entities.ProgrammingTask", "ProgrammingTask")
                        .WithMany("ProgrammingLanguages")
                        .HasForeignKey("ProgrammingLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskLibrary.Db.Entities.ProgrammingLanguage", "ProgrammingLanguage")
                        .WithMany("ProgrammingTasks")
                        .HasForeignKey("ProgrammingTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgrammingLanguage");

                    b.Navigation("ProgrammingTask");
                });

            modelBuilder.Entity("TaskLibrary.Db.Entities.Notification", b =>
                {
                    b.HasOne("TaskLibrary.Db.Entities.Subscription", "Subscription")
                        .WithMany("Notifications")
                        .HasForeignKey("SubscribtionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("TaskLibrary.Db.Entities.ProgrammingTask", b =>
                {
                    b.HasOne("TaskLibrary.Db.Entities.Category", "Category")
                        .WithMany("ProgrammingTasks")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TaskLibrary.Db.Entities.User", "User")
                        .WithMany("ProgrammingTasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskLibrary.Db.Entities.Solution", b =>
                {
                    b.HasOne("TaskLibrary.Db.Entities.ProgrammingLanguage", "ProgrammingLanguage")
                        .WithMany("Solutions")
                        .HasForeignKey("ProgrammingLanguageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TaskLibrary.Db.Entities.ProgrammingTask", "ProgrammingTask")
                        .WithMany("Solutions")
                        .HasForeignKey("ProgrammingTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskLibrary.Db.Entities.User", "User")
                        .WithMany("Solutions")
                        .HasForeignKey("UserId");

                    b.Navigation("ProgrammingLanguage");

                    b.Navigation("ProgrammingTask");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskLibrary.Db.Entities.Subscription", b =>
                {
                    b.HasOne("TaskLibrary.Db.Entities.ProgrammingTask", "ProgrammingTask")
                        .WithMany("Subscriptions")
                        .HasForeignKey("ProgrammingTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TaskLibrary.Db.Entities.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProgrammingTask");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskLibrary.Db.Entities.Category", b =>
                {
                    b.Navigation("ProgrammingTasks");
                });

            modelBuilder.Entity("TaskLibrary.Db.Entities.ProgrammingLanguage", b =>
                {
                    b.Navigation("ProgrammingTasks");

                    b.Navigation("Solutions");
                });

            modelBuilder.Entity("TaskLibrary.Db.Entities.ProgrammingTask", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ProgrammingLanguages");

                    b.Navigation("Solutions");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("TaskLibrary.Db.Entities.Subscription", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("TaskLibrary.Db.Entities.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ProgrammingTasks");

                    b.Navigation("Solutions");

                    b.Navigation("Subscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
